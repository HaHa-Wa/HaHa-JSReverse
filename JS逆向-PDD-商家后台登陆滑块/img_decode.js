global.Buffer = global.Buffer || require('buffer').Buffer;

if (typeof btoa === 'undefined') {
    global.btoa = function (str) {
        return new Buffer(str).toString('base64');
    };
}

if (typeof atob === 'undefined') {
    global.atob = function (b64Encoded) {
        return new Buffer(b64Encoded, 'base64').toString();
    };
}

c = [-1, -1, -1, -1, -1, -1, -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    24,
    3,
    -1,
    20,
    -1,
    17,
    8,
    -1,
    30,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    12,
    22,
    10,
    -1,
    -1,
    15,
    14,
    6,
    -1,
    5,
    -1,
    -1,
    7,
    18,
    -1,
    25,
    9,
    -1,
    28,
    -1,
    2,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    1,
    21,
    -1,
    31,
    13,
    16,
    -1,
    26,
    -1,
    27,
    -1,
    0,
    19,
    -1,
    11,
    4,
    -1,
    -1,
    23,
    -1,
    29,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1
];

function decode(t) {
    var e = t.length;
    for (var n = [], r = 0; r < e; r += 8) {
        var a = c[t.charCodeAt(r)]
            , o = c[t.charCodeAt(r + 1)]
            , i = c[t.charCodeAt(r + 2)]
            , f = c[t.charCodeAt(r + 3)]
            , l = c[t.charCodeAt(r + 4)]
            , d = c[t.charCodeAt(r + 5)]
            , h = c[t.charCodeAt(r + 6)]
            , p = (31 & a) << 3 | (31 & o) >> 2
            , v = (3 & o) << 6 | (31 & i) << 1 | (31 & f) >> 4
            , y = (15 & f) << 4 | (31 & l) >> 1
            , m = (1 & l) << 7 | (31 & d) << 2 | (31 & h) >> 3
            , b = (7 & h) << 5 | 31 & c[t.charCodeAt(r + 7)];
        n.push(String.fromCharCode((31 & p) << 3 | v >> 5)),
            n.push(String['fromCharCode']((31 & v) << 3 | y >> 5)),
            n.push(String['fromCharCode']((31 & y) << 3 | m >> 5)),
            n.push(String.fromCharCode((31 & m) << 3 | b >> 5)),
            n.push(String['fromCharCode']((31 & b) << 3 | p >> 5))
    }
    var g = n['join']("");
    s = '*&%';
    x = '<$|>'
    return (g = (g = (g = g['replace']("#", ""))['replace']("@?", ""))['replace'](s, ""))['replace'](x, "")
}

// t = [""
// ]
//
// ret = decode(t[0])
// console.log(ret)
// var base64Data = ret.replace(/^data:image\/\w+;base64,/, "");
// var dataBuffer = new Buffer(base64Data, 'base64'); // 解码图片
// // var dataBuffer = Buffer.from(base64Data, 'base64'); // 这是另一种写法
// fs.writeFile("qk.png", dataBuffer, function (err) {
//     console.log('保存成功')
// });
